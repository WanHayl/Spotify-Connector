import spotipy
from spotipy.oauth2 import SpotifyOAuth
from spotipy import Spotify
import WebScrape
import pandas as pd
import os

#sample data for testing
# data = {
#     'Artist': ['Van Halen','Robert Plant, Jimmy Page','Aaron Lewis, Fred Durst','Stone Temple Pilots, Chester Bennington','Metallica'],
#     'Song': ['(Oh) Pretty Woman','Most High','Outside','Out of Time','All Within My Hands']
# }

#global values
clientid = 'your-client-id'
clientsecret = 'your-client-secret'
redirecturi = 'your-redirect-uri'


# #Rock List
# music = WebScrape.big_df

# music_df = music[['Artist','Song']]


def retrieve_auth(clientid, clientsecret, redirecturi):
    sp_oauth = SpotifyOAuth(client_id=clientid, client_secret=clientsecret, redirect_uri=redirecturi)
    access_token = sp_oauth.get_cached_token()
    return spotipy.Spotify(auth_manager=sp_oauth)

sp = retrieve_auth(clientid, clientsecret, redirecturi)

#--- gets track ID amnd other song related bits
def search_song(song_name,artist_name,spotify_client):
    query = f'track:{song_name} artist:{artist_name}'
    result = spotify_client.search(q=query,limit=1,type='track')
    if result['tracks']['items']:
        return result['tracks']['items'][0]
    else:
        return None

all_songs_info = []

for band, song in zip(data['Artist'], data['Song']):
    song_info = search_song(song, band, sp)
    if song_info:
        songs = {'Song': song_info['name'],
                'Band': song_info['artists'][0]['name'],
                'Album': song_info['album']['name'],
                'Track ID': song_info['id'],
                'Popularity': song_info['popularity'],
                'Preview URL': song_info['preview_url']
                }
        all_songs_info.append(songs)
    else:
        print(f"No information found for '{song}' by '{band}'.")

songs_df = pd.DataFrame(all_songs_info)



def get_audio_features(track_ids):
    # Initialize an empty list to store audio features for all tracks
    all_audio_features = []
    
    # Iterate over the track IDs in batches of 100
    for i in range(0, len(track_ids), 100):
        # Get a batch of 100 track IDs
        batch_ids = track_ids[i:i+100]
        
        # Call the Spotify API to retrieve audio features for the batch of track IDs
        audio_features_batch = sp.audio_features(batch_ids)
        
        # Extend the list of audio features with the features from the current batch
        all_audio_features.extend(audio_features_batch)
    
    return all_audio_features

flattened_audio_info = []

# Get all track IDs from the songs_df DataFrame
track_ids = songs_df['Track ID'].tolist()

# Call get_audio_features function with all track IDs
audio_features = get_audio_features(track_ids)

# Iterate over audio features and append to the flattened_audio_info list
for features in audio_features:
    if features:
        flattened_audio_info.append(pd.json_normalize(features))

# Concatenate all flattened dictionaries into a single DataFrame
audio_df = pd.concat(flattened_audio_info, ignore_index=True)

# Merge audio_df with songs_df
merged_df = pd.merge(songs_df, audio_df, left_on='Track ID', right_on='id', how='inner')

# Drop unnecessary columns
merged_df = merged_df.drop(columns=['id', 'analysis_url', 'uri', 'track_href'])

# Drop duplicate rows
merged_df = merged_df.drop_duplicates()

# Print or save the merged DataFrame
# print(merged_df)


#--- Writes an output
# Get the directory of the current Python script
script_dir = os.path.dirname(os.path.abspath(__file__))

# Save the big DataFrame to a CSV file in the same directory as the script
output_filename = "Song Information extra.csv"
output_path = os.path.join(script_dir, output_filename)
merged_df.to_csv(output_path, index=False, encoding='utf-8')
#---
print(merged_df.head())